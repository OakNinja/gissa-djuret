{"version":3,"sources":["app/store.js","features/GissaDjuret.js","App.js","serviceWorker.js","index.js"],"names":["initialDatabase","query","yes","guess","no","gissaDjuretSlice","createSlice","name","initialState","database","message","ask","answer","reducers","playAgain","state","guessYes","guessNo","setAnswer","action","payload","setQuery","console","log","betterDatabase","learn","oldGuess","newQuery","configureStore","reducer","selectQuery","selectGuess","selectMessage","selectAsk","selectAnswer","GissaDjuret","dispatch","useDispatch","useSelector","useState","newAnswer","setNewAnswer","setNewQuery","value","onChange","e","target","onClick","actions","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c1f0e7a.chunk.js","sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialDatabase = {\r\n  query: 'Bor den i vattnet?',\r\n  yes: {\r\n    query: 'Äter den träd?',\r\n    yes: {\r\n      guess: 'bäver'\r\n    },\r\n    no: {\r\n      query: 'Bor den i havet?',\r\n      yes: {\r\n        query: 'Är den ett däggdjur?',\r\n        yes: {\r\n          guess: 'val'\r\n        },\r\n        no: {\r\n          query: 'Ser den ut som en orm?',\r\n          yes: {\r\n            guess: 'ål'\r\n          },\r\n          no: {\r\n            guess: 'haj'\r\n          }\r\n        }\r\n      },\r\n      no: {\r\n        guess: 'gädda'\r\n      }\r\n    }\r\n  },\r\n  no: {\r\n    query: 'Har den horn?',\r\n    yes: {\r\n      query: 'Har den snabel?',\r\n      yes: {\r\n        guess: 'Elefant'\r\n      },\r\n      no: {\r\n        query: 'Kryper den?',\r\n        yes: {\r\n          guess: 'snigel'\r\n        },\r\n        no: {\r\n          query: 'Har den lång hals?',\r\n          yes: {\r\n            guess: 'giraff'\r\n          },\r\n          no: {\r\n            query: 'Har den korta ben?',\r\n            yes: {\r\n              guess: 'noshörning'\r\n            },\r\n            no: {\r\n              query: 'Bä?',\r\n              yes: {\r\n                guess: 'get'\r\n              },\r\n              no: {\r\n                guess: 'Älg'\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    no: {\r\n      query: 'Kryper den på marken?',\r\n      yes: {\r\n        query: 'Saknar den ben?',\r\n        yes: {\r\n          query: 'Kan den äta en mus?',\r\n          yes: {\r\n            guess: 'orm'\r\n          },\r\n          no: {\r\n            guess: 'mask'\r\n          }\r\n        },\r\n        no: {\r\n          query: 'Har den svans?',\r\n          yes: {\r\n            guess: 'krokodil'\r\n          },\r\n          no: {\r\n            guess: 'skalbagge'\r\n          }\r\n        }\r\n      },\r\n      no: {\r\n        query: 'Mu?',\r\n        yes: {\r\n          guess: 'kossa'\r\n        },\r\n        no: {\r\n          query: 'Får den valpar?',\r\n          yes: {\r\n            guess: 'hund'\r\n          },\r\n          no: {\r\n            query: 'Har den päls?',\r\n            yes: {\r\n              query: 'Är den prickig?',\r\n              yes: {\r\n                guess: 'leopard'\r\n              },\r\n              no: {\r\n                query: 'Är den randig?',\r\n                yes: {\r\n                  guess: 'lejon'\r\n                },\r\n                no: {\r\n                  guess: 'räv'\r\n                }\r\n              }\r\n            },\r\n            no: {\r\n              query: 'Är den mindre än 1 cm?',\r\n              yes: {\r\n                guess: 'lus'\r\n              },\r\n              no: {\r\n                guess: 'gris'\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const gissaDjuretSlice = createSlice({\r\n  name: \"gissaDjuret\",\r\n  initialState: {\r\n    initialDatabase: initialDatabase,\r\n    database: initialDatabase,\r\n    message: \"\",\r\n    ask: false,\r\n    answer: \"\",\r\n  },\r\n  reducers: {\r\n    playAgain: (state) => {\r\n      return {\r\n        ...state,\r\n        database: state.initialDatabase,\r\n        message: null,\r\n      };\r\n    },\r\n    yes: (state) => {\r\n      return { ...state, database: state.database.yes };\r\n    },\r\n    no: (state) => {\r\n      return { ...state, database: state.database.no };\r\n    },\r\n    guessYes: (state) => {\r\n      return { ...state, message: \"Wohoo!\" };\r\n    },\r\n    guessNo: (state) => {\r\n      return { ...state, ask: true };\r\n    },\r\n    setAnswer: (state, action) => {\r\n      return { ...state, answer: action.payload };\r\n    },\r\n    setQuery: (state, action) => {\r\n      console.log(state, action);\r\n      const { guess, answer, query } = action.payload;\r\n      const betterDatabase = learn(state.initialDatabase, guess, answer, query);\r\n      return {\r\n        ...state,\r\n        initialDatabase: betterDatabase,\r\n        database: betterDatabase,\r\n        message: \"Bättre lycka nästa gång!\",\r\n        ask: false,\r\n        answer: null,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport function learn(database, oldGuess, answer, newQuery) {\r\n  const { query, guess, yes, no } = database;\r\n  if (guess === oldGuess) {\r\n    return {\r\n      query: newQuery,\r\n      yes: {\r\n        guess: answer,\r\n      },\r\n      no: database,\r\n    };\r\n  }\r\n  if (query) {\r\n    return {\r\n      query,\r\n      yes: learn(yes, oldGuess, answer, newQuery),\r\n      no: learn(no, oldGuess, answer, newQuery),\r\n    };\r\n  }\r\n  return database;\r\n}\r\n\r\nexport default configureStore({\r\n  reducer: gissaDjuretSlice.reducer,\r\n});\r\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { gissaDjuretSlice } from \"../app/store\";\n\nexport const selectQuery = (state) => state.database.query;\nexport const selectGuess = (state) => state.database.guess;\nexport const selectMessage = (state) => state.message;\nexport const selectAsk = (state) => state.ask;\nexport const selectAnswer = (state) => state.answer;\n\nexport function GissaDjuret() {\n  const dispatch = useDispatch();\n  const query = useSelector(selectQuery);\n  const guess = useSelector(selectGuess);\n  const message = useSelector(selectMessage);\n  const answer = useSelector(selectAnswer);\n  const ask = useSelector(selectAsk);\n\n  const [newAnswer, setNewAnswer] = useState(\"\");\n  const [newQuery, setNewQuery] = useState(\"\");\n\n  if (ask) {\n    if (!answer) {\n      return (\n        <div>\n          <div>Vad tänkte du på för djur?</div>\n          <div>\n            <input\n              value={newAnswer}\n              onChange={(e) => setNewAnswer(e.target.value)}\n            ></input>\n            <button\n              onClick={() => {\n                dispatch(gissaDjuretSlice.actions.setAnswer(newAnswer));\n              }}\n            >\n              Svara\n            </button>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          Hur skulle du ställa en fråga där svaret är \"ja\" för en {answer} men\n          \"nej\" för en {guess}?\n          <input\n            value={newQuery}\n            onChange={(e) => setNewQuery(e.target.value)}\n          ></input>\n          <button\n            onClick={() => {\n              dispatch(\n                gissaDjuretSlice.actions.setQuery({\n                  guess: guess,\n                  answer: answer,\n                  query: newQuery,\n                })\n              );\n              setNewAnswer(\"\");\n              setNewQuery(\"\");\n            }}\n          >\n            Svara\n          </button>\n        </div>\n      );\n    }\n  }\n\n  if (message) {\n    return (\n      <div>\n        <h1>{message}</h1>\n        <button\n          onClick={() => {\n            dispatch(gissaDjuretSlice.actions.playAgain());\n          }}\n        >\n          Spela igen\n        </button>\n      </div>\n    );\n  }\n\n  if (query) {\n    return (\n      <div>\n        <div>{query}</div>\n        <div>\n          <button onClick={() => dispatch(gissaDjuretSlice.actions.yes())}>\n            Ja\n          </button>\n          <button onClick={() => dispatch(gissaDjuretSlice.actions.no())}>\n            Nej\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (guess) {\n    return (\n      <div>\n        <div>Skulle det kunna vara en {guess}?</div>\n        <div>\n          <button onClick={() => dispatch(gissaDjuretSlice.actions.guessYes())}>\n            Ja\n          </button>\n          <button onClick={() => dispatch(gissaDjuretSlice.actions.guessNo())}>\n            Nej\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { GissaDjuret } from \"./features/GissaDjuret\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <GissaDjuret />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}